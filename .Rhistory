minLOD <- min(compLOD)
minLOD < LODthres
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
newSNP
newLG[1:newSNP[1]]
newSNP[1]
unmapped[newSNP[2]]
newLG[(newSNP[1]+1):length(newLG)]
if(newSNP[1]<length(newLG)) newLG[(newSNP[1]+1):length(newLG)]
if(newSNP[1]<length(newLG)) print(newLG[(newSNP[1]+1):length(newLG)])
newSNP[1]
newSNP[1]
if(1<length(newLG)) print(newLG[(newSNP[1]+1):length(newLG)])
newLG[1:newSNP[1]],unmapped[newSNP[2]]
ifelse(newSNP[1]<length(newLG),newLG[(newSNP[1]+1):length(newLG)],NULL)
newSNP[1]<length(newLG)
newLG[(newSNP[1]+1):length(newLG)]
ifelse(newSNP[1]<length(newLG),newLG[(newSNP[1]+1):length(newLG)],NULL)
ifelse(newSNP[1]<length(newLG),newLG[(newSNP[1]+1):length(newLG)],c())
newSNP[1]<length(newLG)
newLG
c(newLG,unmapped[newSNP[2]])
while(minLOD < LODthres ){
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
if(newSNP[1]<length(newLG))
newLG <- c(newLG[1:newSNP[1]],unmapped[newSNP[2]],newLG[(newSNP[1]+1):length(newLG)])
else
newLG <- c(newLG,unmapped[newSNP[2]])
unmapped <- unmapped[-newSNP[2]]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
}
newLG
finish <- !any(obj$LOD[unmapped,unmapped] < LODthres)
finish
LGs <- c(LGs,list(newLG))
LGs
newLG <- unmapped[sort(which(obj$LOD[unmapped,unmapped]==min(obj$LOD[unmapped,unmapped],na.rm=T),arr.ind=T)[1,])]
newLG
min(obj$LOD[unmapped,unmapped],na.rm=T)
unmapped <- unmapped[-which(unmapped%in%newLG)]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
minLOD < LODthres
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
newSNP
newSNP[1]<length(newLG)
newLG <- c(newLG,unmapped[newSNP[2]])
newLG
unmapped <- unmapped[-newSNP[2]]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
while(minLOD < LODthres ){
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
if(newSNP[1]<length(newLG))
newLG <- c(newLG[1:newSNP[1]],unmapped[newSNP[2]],newLG[(newSNP[1]+1):length(newLG)])
else
newLG <- c(newLG,unmapped[newSNP[2]])
unmapped <- unmapped[-newSNP[2]]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
}
newLG
finish <- !any(obj$LOD[unmapped,unmapped] < LODthres)
finish
LGs <- c(LGs,list(newLG))
newLG <- unmapped[sort(which(obj$LOD[unmapped,unmapped]==min(obj$LOD[unmapped,unmapped],na.rm=T),arr.ind=T)[1,])]
newLG
unmapped <- unmapped[-which(unmapped%in%newLG)]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
while(minLOD < LODthres ){
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
if(newSNP[1]<length(newLG))
newLG <- c(newLG[1:newSNP[1]],unmapped[newSNP[2]],newLG[(newSNP[1]+1):length(newLG)])
else
newLG <- c(newLG,unmapped[newSNP[2]])
unmapped <- unmapped[-newSNP[2]]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
}
finish <- !any(obj$LOD[unmapped,unmapped] < LODthres)
finish
LGs <- c(LGs,list(newLG))
LGs
newLG <- unmapped[sort(which(obj$LOD[unmapped,unmapped]==min(obj$LOD[unmapped,unmapped],na.rm=T),arr.ind=T)[1,])]
unmapped <- unmapped[-which(unmapped%in%newLG)]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
while(minLOD < LODthres ){
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
if(newSNP[1]<length(newLG))
newLG <- c(newLG[1:newSNP[1]],unmapped[newSNP[2]],newLG[(newSNP[1]+1):length(newLG)])
else
newLG <- c(newLG,unmapped[newSNP[2]])
unmapped <- unmapped[-newSNP[2]]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
}
finish <- !any(obj$LOD[unmapped,unmapped] < LODthres)
finish
LGs <- c(LGs,list(newLG))
LGs
unmapped
length(unmapped)
length(unlist(LGs))
length(sort(c(obj$group$BI,obj$group$MI)))
newLG <- unmapped[sort(which(obj$LOD[unmapped,unmapped]==min(obj$LOD[unmapped,unmapped],na.rm=T),arr.ind=T)[1,])]
unmapped <- unmapped[-which(unmapped%in%newLG)]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
while(minLOD < LODthres ){
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
if(newSNP[1]<length(newLG))
newLG <- c(newLG[1:newSNP[1]],unmapped[newSNP[2]],newLG[(newSNP[1]+1):length(newLG)])
else
newLG <- c(newLG,unmapped[newSNP[2]])
unmapped <- unmapped[-newSNP[2]]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
}
finish <- !any(obj$LOD[unmapped,unmapped] < LODthres)
finish
LGs <- c(LGs,list(newLG))
LGs
while(!finish){
newLG <- unmapped[sort(which(obj$LOD[unmapped,unmapped]==min(obj$LOD[unmapped,unmapped],na.rm=T),arr.ind=T)[1,])]
unmapped <- unmapped[-which(unmapped%in%newLG)]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
while(minLOD < LODthres ){
newSNP <- matrix(which(compLOD == minLOD,arr.ind=T),ncol=2)[1,]
if(newSNP[1]<length(newLG))
newLG <- c(newLG[1:newSNP[1]],unmapped[newSNP[2]],newLG[(newSNP[1]+1):length(newLG)])
else
newLG <- c(newLG,unmapped[newSNP[2]])
unmapped <- unmapped[-newSNP[2]]
compLOD <- obj$LOD[newLG,unmapped]
minLOD <- min(compLOD)
}
finish <- !any(obj$LOD[unmapped,unmapped] < LODthres)
LGs <- c(LGs,list(newLG))
}
LGs
image(obj$rf[LGs[1],LGs[1]],zlim=c(0,0.5))
image(obj$rf[LGs[[1]],LGs[[1]]],zlim=c(0,0.5))
image(obj$rf[LGs[[1]][150:170],LGs[[1]][150:170]],zlim=c(0,0.5))
image(obj$rf[LGs[[1]][150:200],LGs[[1]][150:200]],zlim=c(0,0.5))
image(obj$rf[LGs[[1]][100:150],LGs[[1]][100:150]],zlim=c(0,0.5))
image(obj$rf[LGs[[1]][100:160],LGs[[1]][100:160]],zlim=c(0,0.5))
image(obj$rf[LGs[[1]][130:160],LGs[[1]][130:160]],zlim=c(0,0.5))
LGs[[1]][130:160]
obj$config[LGs[[1]][130:160]]
snp1=588
group$BI
obj$group$BI == 588
which(obj$group$BI == 588)
snp1=101
which(obj$group$BI == 145)
snp2=18
ind = obj$group$BI[c(snp1,snp2)]
ind
rf.est1 <- rf_est_FS(0.2,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,1)), epsilon=NULL)
rf.est1
rf.est2 <- rf_est_FS(0.2,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
rf.est2
rf.est4 <- rf_est_FS(0.2,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,4)), epsilon=NULL)
rf.est4
rf.est2 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
rf.est2
rf.est2 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,3)), epsilon=NULL)
rf.est2
rf.est2 <- rf_est_FS(0.3,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,3)), epsilon=NULL)
rf.est2
rf.est2 <- rf_est_FS(0.3,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
rf.est2
rf.est2 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
rf.est2
rf.est2 <- rf_est_FS(0.4,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
rf_est2
rf.est2
cl <- makeCluster(nClust)
registerDoSNOW(cl)
rf.BI <- foreach(snp1 = iter(1:nSnps_BI), .packages='GUSMap', .combine=comb) %dopar% {
rf <- replicate(2,numeric(nSnps_BI),simplify=F)
for(snp2 in seq_len(snp1-1)){
ind = obj$group$BI[c(snp1,snp2)]
temp1 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,1)), epsilon=NULL)
temp2 <- rf_est_FS(0.4,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,1)), epsilon=NULL)
rf.est1 <- switch(which.min(c(temp1$loglik,temp2$loglik)),temp1,temp2)
temp1 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
temp2 <- rf_est_FS(0.4,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
rf.est2 <- switch(which.min(c(temp1$loglik,temp2$loglik)),temp1,temp2)
temp1 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,4)), epsilon=NULL)
temp2 <- rf_est_FS(0.4,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,4)), epsilon=NULL)
rf.est4 <- switch(which.min(c(temp1$loglik,temp2$loglik)),temp1,temp2)
rf.ind <- switch(which.min(c(rf.est1[[2]], rf.est2[[2]], rf.est4[[2]]) ),
rf.est1,rf.est2,rf.est4)
rf[[1]][snp2] <- rf.ind$rf
rf[[2]][snp2] <- rf.ind$LOD
}
return(rf)
}
for(i in 1:2){
rf.BI[[i]][upper.tri(rf.BI[[i]])] <- t(rf.BI[[i]])[upper.tri(rf.BI[[i]])]
}
origOrder <- order(c(obj$group$BI,obj$group$PI,obj$group$MI))
rf.mat <- rbind(cbind(rf.BI[[1]],t(rf.PI.BI[[1]]),t(rf.MI.BI[[1]])),
cbind(rf.PI.BI[[1]], rf.PI[[1]], t(rf.MI.PI[[1]])),
cbind(rf.MI.BI[[1]], rf.MI.PI[[1]], rf.MI[[1]]))[origOrder,origOrder]
LOD.mat <- rbind(cbind(rf.BI[[2]],t(rf.PI.BI[[2]]),t(rf.MI.BI[[2]])),
cbind(rf.PI.BI[[2]], rf.PI[[2]], t(rf.MI.PI[[2]])),
cbind(rf.MI.BI[[2]], rf.MI.PI[[2]], rf.MI[[2]]))[origOrder,origOrder]
image(rf.mat)
image(rf.mat[obj$group$BI,obj$group$BI])
image(rf.mat[LGs[[1]],LGs[[1]]])
image(rf.mat[LGs[[1]][130:170],LGs[[1]][130:160]])
LGs[[1]][130:170]
which(obj$group$BI == 588)
snp1=101
which(obj$group$BI == 233)
image(obj$rf.mat[LGs[[1]][130:170],LGs[[1]][130:160]])
image(obj$rf[LGs[[1]][130:170],LGs[[1]][130:160]])
image(rf[LGs[[1]][130:170],LGs[[1]][130:160]])
snp1
snp2
ind = obj$group$BI[c(snp1,snp2)]
ind
temp1 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,1)), epsilon=NULL)
temp2 <- rf_est_FS(0.4,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,1)), epsilon=NULL)
temp1
temp2
temp1 <- rf_est_FS(0.1,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
temp2 <- rf_est_FS(0.4,depth_Ref=list(obj$depth_Ref[,ind]),depth_Alt=list(obj$depth_Alt[,ind]), OPGP=list(c(1,2)), epsilon=NULL)
temp1
temp2
temp1
which.min(c(temp1$loglik,temp2$loglik))
switch(which.min(c(temp1$loglik,temp2$loglik)),temp1,temp2)
image(rf[LGs[[1]],LGs[[1]]])
image(rf.mat[LGs[[1]],LGs[[1]]])
image(obj$rf[LGs[[1]],LGs[[1]]])
image(obj$rf[LGs[[1]][which(obj$config[LGs[[1]]]!=1)],LGs[[1]][which(obj$config[LGs[[1]]]!=1)]])
image(obj$LOD[LGs[[1]][which(obj$config[LGs[[1]]]!=1)],LGs[[1]][which(obj$config[LGs[[1]]]!=1)]])
image(obj$rf[LGs[[1]][which(obj$config[LGs[[1]]]!=1)],LGs[[1]][which(obj$config[LGs[[1]]]!=1)]])
image(obj$rf[LGs[[1]][which(obj$config[LGs[[1]]]!=1)],LGs[[1]][which(obj$config[LGs[[1]]]!=1)]],zlim=c(0,0.5))
stopCluster(cl)
library(GUSMap)
ll_fs_scaled_err
ls()
?ll_fs_scaled_err
rf_est_FS()
?rf_est_FS
ll_fs_mp_scaled_err
ll_fs_mp_scaled_err
depth_Ref <- matrix(as.integer(0:5),nrow=2)
depth_Alt <- matrix(as.integer(0:5),nrow=2)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
depth_Ref <- matrix(as.integer(0:5),nrow=2)
depth_Alt <- matrix(as.integer(0:5),nrow=2)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
set.seed(45)
rf<- runif(nSnps-1,0.01,0.1)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf,as.numeric(0.01)),depth_Ref,
depth_Alt, Kab, bb, as.integer(sample(1:5,size=nSnps,replace=T)), nInd, nSnps, 1, T)
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
depth_Alt, Kab, bb, as.integer(sample(1:5,size=nSnps,replace=T)), nInd, nSnps, 1, T)
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
depth_Alt, bb, Kab, as.integer(sample(1:5,size=nSnps,replace=T)), nInd, nSnps, 1, T)
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
depth_Alt, bb, Kab, as.integer(sample(1:5,size=nSnps,replace=T)), nInd, nSnps, as.integer(1), T)
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),as.numeric(depth_Ref),
as.numeric(depth_Alt), bb, Kab, as.integer(sample(1:5,size=nSnps,replace=T)), nInd, nSnps, as.integer(1), T)
depth_Ref <- matrix(0:5,nrow=2)
depth_Alt <- matrix(0:5,nrow=2)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
as.numeric(depth_Alt), bb, Kab, as.integer(sample(1:5,size=nSnps,replace=T)), nInd, nSnps, as.integer(1), T)
depth_Ref <- matrix(as.numeric(0:5),nrow=2)
depth_Alt <- matrix(as.numeric(0:5),nrow=2)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
as.numeric(depth_Alt), bb, Kab, as.integer(sample(1:5,size=nSnps,replace=T)), nInd, nSnps, as.integer(1), T)
is.integer(depth_Ref)
is.integer(depth_Alt)
is.integer(c(as.numeric(rf),as.numeric(0.01)))
depth_Ref <- matrix(as.integer(0:5),nrow=2)
depth_Alt <- matrix(as.integer(0:5),nrow=2)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
OPGP <- sample(1:5,size=nSnps,replace=T)
depth_Ref <- matrix(as.numeric(0:5),nrow=2)
depth_Alt <- matrix(as.numeric(0:5),nrow=2)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
as.numeric(depth_Alt), bb, Kab, as.numeric(OPGP), nInd, nSnps, as.integer(1), T)
depth_Ref <- matrix(as.integer(0:5),nrow=2)
depth_Alt <- matrix(as.integer(0:5),nrow=2)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
set.seed(65)
OPGP <- sample(1:5,size=nSnps,replace=T)
depth_Ref <- matrix(as.numeric(0:5),nrow=2)
depth_Alt <- matrix(as.numeric(0:5),nrow=2)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
as.numeric(depth_Alt), bb, Kab, as.numeric(OPGP), nInd, nSnps, as.integer(1), T)
OPGP
depth_Ref
depth_Alt
depth_Ref <- matrix(as.integer(0:14),nrow=5)
depth_Alt <- matrix(as.integer(0:14),nrow=5)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
set.seed(65)
OPGP <- sample(1:5,size=nSnps,replace=T)
set.seed(45)
rf<- runif(nSnps-1,0.01,0.1)
depth_Ref <- matrix(as.numeric(0:14),nrow=5)
depth_Alt <- matrix(as.numeric(0:14),nrow=5)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
as.numeric(depth_Alt), bb, Kab, as.numeric(OPGP), nInd, nSnps, as.integer(1), T)
debug(ll_fs_mp_scaled_err)
depth_Ref <- matrix(as.numeric(0:14),nrow=5)
depth_Alt <- matrix(as.numeric(0:14),nrow=5)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),depth_Ref,
as.numeric(depth_Alt), bb, Kab, as.numeric(OPGP), nInd, nSnps, as.integer(1), T)
r
para
epsilon
llval
Kaa
1
Kaa
bcoef_mat
depth_Ref
depth_Alt
Kbb
bcoef_mat[[fam]] * (1 - epsilon)^depth_Ref[[fam]] *
epsilon^depth_Alt[[fam]]
bcoef_mat[[fam]]
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), as.numeric(OPGP), list(nInd), nSnps, as.integer(1), T)
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), as.numeric(OPGP), list(nInd), nSnps, as.integer(1), T)
Kaa
Kab
fam
llval
r
epsilon
OPGP[[1]]
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
depth_Ref <- matrix(as.integer(0:14),nrow=5)
depth_Alt <- matrix(as.integer(rep(0:2,5)),nrow=5)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
set.seed(65)
OPGP <- sample(1:5,size=nSnps,replace=T)
set.seed(45)
rf<- runif(nSnps-1,0.01,0.1)
depth_Ref <- matrix(as.numeric(0:14),nrow=5)
depth_Alt <- matrix(as.numeric(rep(0:2,5)),nrow=5)
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
depth_Ref
depth_Alt
OPGp
OPGP
Kab
Kbb
bb* (1 - epsilon)^depth_Alt
bb* (1 - 0.01)^depth_Alt
bb* (1 - 0.01)^depth_Alt * 0.01^depth_Ref
OPGP
bb* (1 - 0.01)^depth_Ref * 0.01^depth_Alt
depth_Ref <- matrix(as.numeric(0:14),nrow=5)
depth_Alt <- matrix(as.numeric(rep(0:2,5)),nrow=5)
depth <- depth_Ref + depth_Alt
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
rf
depth_Ref <- matrix(as.integer(0:14),nrow=5)
depth_Alt <- matrix(as.integer(rep(0:2,5)),nrow=5)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
set.seed(65)
OPGP <- sample(1:5,size=nSnps,replace=T)
set.seed(45)
rf<- c(0.01,0.01) #runif(nSnps-1,0.01,0.1)
depth_Ref <- matrix(as.numeric(0:14),nrow=5)
depth_Alt <- matrix(as.numeric(rep(0:2,5)),nrow=5)
depth <- depth_Ref + depth_Alt
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
rf
rf = c(0.05,0.05)
depth_Ref <- matrix(as.numeric(0:14),nrow=5)
depth_Alt <- matrix(as.numeric(rep(0:2,5)),nrow=5)
depth <- depth_Ref + depth_Alt
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
depth_Ref <- matrix(as.integer(0:14),nrow=1)
depth_Alt <- matrix(as.integer(rep(0:2,5)),nrow=1)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
set.seed(65)
OPGP <- sample(1:5,size=nSnps,replace=T)
set.seed(45)
rf<- c(0.01,0.01) #runif(nSnps-1,0.01,0.1)
depth_Ref <- matrix(as.numeric(0:14),nrow=1)
depth_Alt <- matrix(as.numeric(rep(0:2,5)),nrow=1)
depth <- depth_Ref + depth_Alt
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
depth_Ref
depth_Alt
depth
bb
Kab
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
r
depth_Ref <- matrix(as.integer(0:14),nrow=1)
depth_Alt <- matrix(as.integer(rep(0:2,5)),nrow=1)
depth <- depth_Ref + depth_Alt
nInd <- nrow(depth)
nSnps = ncol(depth)
set.seed(65)
OPGP <- sample(1:5,size=nSnps,replace=T)
set.seed(45)
rf<- c(rep(0.01,0.01,nSnps-1)) #runif(nSnps-1,0.01,0.1)
depth_Ref <- matrix(as.numeric(0:14),nrow=1)
depth_Alt <- matrix(as.numeric(rep(0:2,5)),nrow=1)
depth <- depth_Ref + depth_Alt
bb = choose(depth,depth_Ref)
Kab = bb * (1/2)^depth
ll_fs_mp_scaled_err(c(as.numeric(rf),as.numeric(0.01)),list(depth_Ref),
list(depth_Alt), list(bb), list(Kab), list(as.numeric(OPGP)), list(nInd), nSnps, as.integer(1), T)
r
epsilon
Kaa
Kaa
Kab
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
getwd()
setwd("GUSMap/")
library(devtools)
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
build()
build()
getwd()
build()
q()
