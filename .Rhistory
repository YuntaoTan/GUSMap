rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.4,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.01,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.01,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 11) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.01,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 12) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.3,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 9) + 2 * (config[ind] == 5)),
epsilon = NULL)
LF.mat.order[[1]][c(5,8,9,24,25)]
config[c(24,567,568)]
ind=c(568,34)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 1) + 2 * c(config[ind[1]] ==
3, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 2) + 2 * c(config[ind[1]] ==
3, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL, sexSpec=T)
debug(rf_est_FS)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL, sexSpec=T)
ps <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
1:8)))))[-1] - 1
ms <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
c(1:4, 9:12))))))[-1] - 1
npar <- c(length(ps), length(ms))
if (length(init_r) == 1)
para <- logit2(rep(init_r, sum(npar)))
else if (length(init_r) != sum(npar))
para <- logit2(rep(0.1, sum(npar)))
else para <- init_r
if (length(epsilon) != 1 & !is.null(epsilon))
para <- c(para, logit(0.001))
else if (!is.null(epsilon))
para <- c(para, logit(epsilon))
seqErr = !is.null(epsilon)
ps <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
1:8)))))[-1] - 1
ms <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
c(1:4, 9:12))))))[-1] - 1
npar <- c(length(ps), length(ms))
length(init_r) == 1
para <- logit2(rep(init_r, sum(npar)))
para
length(epsilon) != 1 & !is.null(epsilon)
!is.null(epsilon)
seqErr = !is.null(epsilon)
optim.MLE <- optim(para, ll_fs_ss_mp_scaled_err,
method = "BFGS", control = optim.arg, depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat,
Kab = Kab, nInd = nInd, nSnps = nSnps, OPGP = OPGP,
ps = ps, ms = ms, npar = npar, noFam = noFam,
seqErr = !is.null(epsilon))
obj <- readRA(genofile,gform,mum,dad,nClust=3, pvalue=0.1,DEPTHthres = 10)
ind
LF.mat.order[[1]][c(5,8,9,24,25)]
ind = c(568,34)
ind = c(34,568)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
undebug(rf_est_FS)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
ind
table9genon[,ind[1]])
table(genon[,ind[1]])
table(obj$genon[,ind[1]])
table(obj$genon[,ind[2]])
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 4) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
debug(rf_est_FS)
rf.est2 <- rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
para = c(logit(0.01))
seqErr = !is.null(epsilon)
seqErr
optim(para, ll_fs_mp_scaled_err, method = "BFGS",
control = list(reltol = 1e-10), depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat, Kab = Kab,
nInd = nInd, nSnps = nSnps, OPGP = OPGP, noFam = noFam,
seqErr = seqErr)
inv.logit(-2.24175)
para <- logit2(0.2)
optim(para, ll_fs_mp_scaled_err, method = "BFGS",
control = list(reltol = 1e-10), depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat, Kab = Kab,
nInd = nInd, nSnps = nSnps, OPGP = OPGP, noFam = noFam,
seqErr = seqErr)
optim(para, ll_fs_ss_mp_scaled_err, method = "BFGS",
control = list(reltol = 1e-10), depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat, Kab = Kab,
nInd = nInd, nSnps = nSnps, OPGP = OPGP, noFam = noFam,
seqErr = seqErr)
ps <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
1:8)))))[-1] - 1
ms <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
c(1:4, 9:12))))))[-1] - 1
npar <- c(length(ps), length(ms))
init_r
para <- logit2(rep(init_r, sum(npar)))
para <- logit2(rep(0.2, sum(npar)))
para
para
ps
ms
LF.mat.order[[1]][1:24]
config(LF.mat.order[[1]][1:24])
config[LF.mat.order[[1]][1:24]]
config[LF.mat.order[[1]][1:24]]
ind
ind=c(24,25)
LF.mat.order[[1]][1:25]
ind=c(30,34)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 9) + 2 * (config[ind] == 5)),
epsilon = NULL)
undebug(rf_est_FS)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 11) + 2 * (config[ind] == 5)),
epsilon = NULL)
table(genon[,ind[1]])
table(obj$genon[,ind[1]])
table(obj$genon[,ind[2]])
table(obj$genon[,ind[1]], obj$genon[,ind[2]])
LF.mat.order[[1]][c(4,24,25)]\
LF.mat.order[[1]][c(4,24,25)]
LF.mat.order[[1]][c(5,24,25)]
ind = c(567,25)
ind = c(567,34)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 2) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
obj$config
detach("package:GUSMap", unload=T)
library(GUSMap)
rm(orderLG)
obj <- readRA(genofile,gform,mum,dad,nClust=3, pvalue=0.1,DEPTHthres = 10)
LG.mat <- createGroups(obj, parent="maternal",LOD = 10)
LG.mat
LG.mat2 <- addSNPs(obj, LG.mat, LOD=10)
plotLGs(obj, LG.mat2,chrom=T)#,filename="test")
LF.mat.order <- orderLG(obj,LG.mat2)
plotLGs(obj, LF.mat.order,chrom=T)#,filename="test")
LG.mat3 <- addBIsnps(obj, LG.mat2, LOD=10)
LF.mat.order <- orderLG(obj,LG.mat2)
LF.mat.order <- orderLG(obj,LG.mat3)
plotLGs(obj, LF.mat.order,chrom=T)#,filename="test")
obj$config[LF.mat.order[[1]]]
276*4
phaseToOPGP <- function(phase, nSnps, swap=FALSE){
parHap <- matrix("A",nrow=4,ncol=nSnps)
if(swap){
mat <- substr(phase,1,1)
pat <- substr(phase,2,2)
}
else{
pat <- substr(phase,1,1)
mat <- substr(phase,2,2)
}
## Sort out any duplicates
if(any(pat=='d')|any(mat=='u')){
pat[which(pat == 'd')] <- pat[which(pat == 'd')-1]
mat[which(mat == 'd')] <- pat[which(mat == 'd')-1]
}
parHap[cbind(suppressWarnings(as.numeric(pat))+1,1:nSnps)] <- "B"
parHap[cbind(suppressWarnings(as.numeric(mat))+3,1:nSnps)] <- "B"
## make sure the baseline phase is correct
if(parHap[1,which(apply(parHap[1:2,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[1:2,] <- parHap[2:1,]
if(parHap[3,which(apply(parHap[3:4,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[3:4,] <- parHap[4:3,]
## Convert the parental haplotypes into phase numbers
OPGP <- parHapToOPGP(parHap)
}
### Function for estimating rf with LM
est_LM <- function(genon, depth_Ref, depth_Alt, config, filename = "MKdata_11"){
## generate the data
genoToOtherFormats(genon = genon, depth_Ref = depth_Ref, depth_Alt = depth_Alt, config=config,formats=list(lepmap=T,joinmap=T,crimap=T,onemap=T),
filename=filename, direct="../Data/", thres=NULL)
write(1:ncol(genon),file = "../Data/fixOrder_LM.txt", ncolumns=1)
## Compute rf estimates using error parameters
system(paste0("java -cp ../../../Simulations/LepMap2/bin/ OrderMarkers evaluateOrder=../Data/fixOrder_LM.txt data=../Data/",filename,
"_LepMap.txt improveOrder=0 sexAveraged=1 useKosambi=2 removeDuplicates=0 >res_",filename,"_LM.txt"))
LP.res_err <- read.table(file=paste0("res_",filename,"_LM.txt"),sep="\t",quote="#",skip=3,row.names = 1,stringsAsFactors=F)
LP.phase_err <- phaseToOPGP(LP.res_err[,4],ncol(genon))
rf.est_err <- diff(LP.res_err[,1])
## Compute rf estimates using no error parameter
system(paste0("java -cp ../../../Simulations/LepMap2/bin/ OrderMarkers evaluateOrder=../Data/fixOrder_LM.txt data=../Data/",filename,
"_LepMap.txt improveOrder=0 sexAveraged=1 useKosambi=2 learnErrorParameters=0 initError=0 removeDuplicates=0 >res_",filename,"_LM.txt"))
LP.res <- read.table(file=paste0("res_",filename,"_LM.txt"),sep="\t",quote="#",skip=3,row.names = 1,stringsAsFactors=F)
LP.phase <- phaseToOPGP(LP.res[,4],ncol(genon))
rf.est <- diff(LP.res[,1])
return(list(list(rf.est_err,LP.phase_err,LP.res_err),list(rf.est,LP.phase,LP.res)))
}
#### For extracting the results out of JM
est_JM <- function(resultsFile,nSnps) { sapply(which(readLines(resultsFile)=="best map order:")+15+seq(0,((nSnps-1)*3-2),3),function(x){
tempV <- strsplit(readLines(resultsFile)[x],"\\s+")[[1]]
return(as.numeric(tempV[length(tempV)-2]))
})
}
#### For CriMap
est_CM <- function(filename, nSnps){
setwd("../Data")
cat(paste0(rep("n",4),sep="\n"),"4\n",paste(0:(nSnps-1),collapse=" ")," *\n","y", file="run_MK.txt", sep="")
system(paste0("../../../Simulations/CriMap/bin/crimap 1_",filename," prepare <run_MK.txt"))
system(paste0("../../../Simulations/CriMap/bin/crimap 1_",filename," fixed >cm_out.txt"))
out <- readLines("cm_out.txt")
findx <- which(substr(out,1,6) == "Sex_av") + 3
results <- as.numeric(sapply(seq(findx,findx+(nSnps-1)*2-1,2),function(x){
return(strsplit(out[x],"\\s+")[[1]][2])
}))
system(paste0("rm chr1_",filename,".dat"))
system(paste0("rm chr1_",filename,".loc"))
system(paste0("rm chr1_",filename,".par"))
setwd("../Aligned2/")
return(results)
}
est_OM <- function(filename, nSnps){
OM_simData <<- read.outcross(file=paste0("../Data/",filename,"_OneMap.txt"))
## Compute the 2 point estimates
OM_2p <<- rf.2pts(OM_simData,LOD=0)
## Create the map
OM_temp <- make.seq(OM_2p,'all')
OM_temp <- map(OM_temp,1:nSnps)
return(list(OM_temp$seq.rf,phaseToOPGP_OM(OM_temp)))
}
######################## Under take the analysis
library(GUSMap)
library(onemap)
manuka <- Manuka11()
## To access the RA directly
RAname <- system.file("extdata", "Manuka11.txt.gz", package="GUSMap")
RAdata <- read.table(RAname, header=T)
## Work out the segregation types
config <- unlist(apply(manuka$genon[1:4,],2,function(x){
x_p = x[1:2]; x_m = x[3:4]
if(any(x_p==1,na.rm=T) & any(x_m==1,na.rm=T))
return(1)
else if(all(x_m==2,na.rm=T) & any(x_p==1, na.rm=T))
return(2)
else if(all(x_m==0,na.rm=T) & any(x_p==1, na.rm=T))
return(3)
else if(all(x_p==2,na.rm=T) & any(x_m==1,na.rm=T))
return(4)
else if(all(x_p==0,na.rm=T) & any(x_m==1,na.rm=T))
return(5)
}))
## SNPs removed due to mis-ordering
badSnps <- rep(FALSE, ncol(manuka$genon))
badSnps[c(3:14,16,18:23,25:27,29,33:35,39:42,44,46:49,
53,58:60,63,65:67,69:74,76,77,85,104,114:129,
152,162,163,173:180,187:190,206:208,210,212,213,
216,228,272,285,286,298,304,314,318,320,342,344,345,
354,358,370,373,380,389,390,397,408,411,421,427,
437,446,469,493,498:500,506,510,516,519,522,531,
543,553,556,569,582,585,601,617,620,623,628,635,
636:643,647:650,669:680)] <- TRUE
ind_rd6 <- which(colMeans(manuka$depth_Ref[-c(1:4),] + manuka$depth_Alt[-c(1:4),],na.rm=T ) < 6 & !badSnps)
getwd()
install.packages("roxygen2")
library(roxygen2)
install.packages("xml2")
load("/mnt/maybe/home/tbilton/PhD/Papers/Paper1/Code/Final/Manuka_Final.RData")
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_LM_rd6[[2]][[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=rep(c(myCol[1],'black'),2))
abline(v=0.475,lty=2)
text(x = 0.25, y=1050, labels="Low")
text(x = 0.75, y=1051, labels="High")
png("manuka_NZSA.png",width=1000,height=1500, res=300, pointsize=12, family="Arial",type='cairo')
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_LM_rd6[[2]][[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=rep(c(myCol[1],'black'),2))
abline(v=0.475,lty=2)
text(x = 0.25, y=1050, labels="Low")
text(x = 0.75, y=1051, labels="High")
dev.off()
library(onemap)
png("manuka_NZSA.png",width=1000,height=1500, res=300, pointsize=12, family="Arial",type='cairo')
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_LM_rd6[[2]][[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=rep(c(myCol[1],'black'),2))
abline(v=0.475,lty=2)
text(x = 0.25, y=1050, labels="Low")
text(x = 0.75, y=1051, labels="High")
dev.off()
png("manuka_NZSA_subset.png",width=800,height=1500, res=300, pointsize=12, family="Arial",type='cairo')
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=c(myCol[1],myCol[1],'black'))
abline(v=0.225,lty=2)
text(x = 0.1, y=115, labels="Low")
text(x = 0.5, y=115.5, labels="High")
dev.off()
getwd()
ep=0.001; a=7; b=0; choose(a+b,a) * (1-ep)^a*ep^b
ep=0.001; a=7; b=0; choose(a+b,a) * (1-ep)^b*ep^a
choose(a+b,a)
(1-ep)^b*ep^a
b
a
ep^7
ep=0.001; a=5; b=0; choose(a+b,a) * (1-ep)^b*ep^a
ep=0.001; a=5; b=0; choose(a+b,a) * (1-ep)^a*ep^b
ep=0.001; a=6; b=0; choose(a+b,a) * (1-ep)^a*ep^b
choose(a+b,a) * (1/2)^(a+b)
a=7
choose(a+b,a) * (1/2)^(a+b)
ep=0.001; a=7; b=0; choose(a+b,a) * (1-ep)^a*ep^b
choose(a+b,a) * (1/2)^(a+b)
ep=0.001; a=7; b=0; choose(a+b,a) * (1-ep)^b*ep^a
ep=0.001; a=0; b=6; choose(a+b,a) * (1-ep)^b*ep^a
choose(a+b,a) * (1/2)^(a+b)
ep=0.001; a=5; b=1; choose(a+b,a) * (1-ep)^a*ep^b
ep=0.001; a=5; b=1; choose(a+b,a) * (1-ep)^b*ep^a
choose(a+b,a) * (1/2)^(a+b)
a
b
chose(4+3,4)
choose(4+3,4)
choose(3,1)
choose(2+5,1)
choose(2+5,2)
ep=0.001; a=7; b=0; choose(a+b,a) * (1-ep)^a*ep^b
ep=0.001; a=0; b=6; choose(a+b,a) * (1-ep)^a*ep^b
ep=0.001; a=3; b=2; choose(a+b,a) * (1-ep)^a*ep^b
ep=0.001; a=1; b=2; choose(a+b,a) * (1-ep)^a*ep^b
ep=0.001; a=1; b=2; round(choose(a+b,a) * (1-ep)^a*ep^b,6)
ep=0.001; a=5; b=0; round(choose(a+b,a) * (1-ep)^a*ep^b,6)
ep=0.001; a=5; b=2; round(choose(a+b,a) * (1-ep)^a*ep^b,6)
7 * 0.000079891883
-300
-300 -280
-300 + 280
-300 + 310
-300 + 280
-300 + 299.9990
-299.9990 + 300
-374
-374 + 0
llval = 0;
prellval = -100
prellval + llval
delta = -1e-10
(prellval + llval) > delta
llval = -387.9755
(prellval + llval) > delta
prellval + llval
prellval = 0
llval
(prellval + llval) > delta
prellval + llval
prellval = llval
llval = -386.9755
(prellval + llval) > delta
prellval + llval
(prellval - llval)
llval = 0
prellval=100
(prellval - llval)
prellval=0
llval = 0
llval = 100
(prellval - llval)
prellval = 100
prellval
llval = -387.9755
(prellval - llval)
llval = -387.9755
prellval = -389.9755
(prellval - llval)
(llval - prellval)
llval = -387.9755
llval
llval - 0
llval - 10000000000000000000000000000000000000000000
log(0.0001)
1/(0.0001026778808119716653*0.0006563782057740216247 +
0.0000000810406364356406*0.0645268397236451601851 +
0.0000808304649663010134*0.0276929261858244318839 +
0.9998164106135852824409*2.7209861780794137864348 +)
1/(0.0001026778808119716653*0.0006563782057740216247 +
0.0000000810406364356406*0.0645268397236451601851 +
0.0000808304649663010134*0.0276929261858244318839 +
0.9998164106135852824409*2.7209861780794137864348)
exp(-0.367581)
exp(0.367581)
-log(0.367581)
1/(0.0000410494142968377348* 0.0014028488761770590166 +
0.0000000704795910525510*0.1068108158922012745906 +
0.0000599138386133865654*0.0354789234823569277211 +
0.9998989662674987455304*2.7009465863147763542429)
-log(0.370277)
s1=0;s2=2
s1=0;s2=2; c(2*s1,1+2*s2)
s1=0;s2=0; c(2*s1,1+2*s2)
s1=0;s2=1; c(2*s1,1+2*s2)
s1=1;s2=1; c(2*s1,1+2*s2)
s1=1;s2=0; c(2*s1,1+2*s2)
s1=1;s2=0; c(1+2*s1,2*s2)
s1=0;s2=0; c(1+2*s1,2*s2)
s1=0;s2=1; c(1+2*s1,2*s2)
s1=1;s2=1; c(1+2*s1,2*s2)
-6431.4721894057356621487997 - -6459.4941266177074794541113
3.204649007270370906239140978977175678e-01/10
3.204649007270370906239140978977175678e-01/16
options(digits = 20)
3.204649007270370906239140978977175678e-01/16
0.0000002384185791*0.0000001163921733681477
(0.0000002384185791*0.0000001163921733681477 )/exp(8.76326198)
(0.0000002384185791*0.0000001163921733681477 )/exp(-8.76326198)
(0.0000002384185791*0.0001135869078374 )/exp(-8.76326198)
(0.0585937500000000 * 0.0000566417239153)/exp(-(23.43471438-8.76326198))
(0.0585937500000000 * 0.0000566417239153)/exp((23.43471438-8.76326198))
6.48575053 + 12.52747233
8.76326198 + 12.52747233
log(0.0000002)
log(0.0000000000000002)
log(0.00000000000000000000000002)
(0.0585937500000000 * 0.0000566417239153)/exp(-12.52747)
(0.0585937500000000 * 0.0000566417239153)/exp(12.52747)
getwd()
setwd(GUS)
setwd("GUSMap/")
library(devtools)
document()
document()
document()
?document
install()
detach("package:GUSMap",unload=T)
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
install()
