detach("package:GSU")
detach("package:GUSMap",unload=T)
rf_est_FS
rm(list=ls())
library(GUSMap)
mum = c("P1_S1","P1_S2")
dad = c("P2_S1","P2_S2")
genofile <- system.file("extdata", "Manuka11.txt.gz", package="GUSMap")
gform="Tassel"
obj <- readRA(genofile,gform,mum,dad,nClust=3, pvalue=0.1,DEPTHthres = 10)
LG.mat <- createGroups(obj, parent="maternal",LOD = 10)
plotLGs(obj, LF.mat.order,chrom=T)#,filename="test")
plotLGs(obj, LF.mat,chrom=T)#,filename="test")
plotLGs(obj, LG.mat,chrom=T)#,filename="test")
LG.mat2 <- addSNPs(obj, LG.mat, LOD=10)
plotLGs(obj, LG.mat2,chrom=T)#,filename="test")
detact("package:GUSMap", unload=T)
detach("package:GUSMap", unload=T)
library(GUSMap)
rm(list=ls())
mum = c("P1_S1","P1_S2")
dad = c("P2_S1","P2_S2")
genofile <- system.file("extdata", "Manuka11.txt.gz", package="GUSMap")
gform="Tassel"
obj <- readRA(genofile,gform,mum,dad,nClust=3, pvalue=0.1,DEPTHthres = 10)
LG.mat <- createGroups(obj, parent="maternal",LOD = 10)
LG.mat2 <- addSNPs(obj, LG.mat, LOD=10)
plotLGs(obj, LG.mat2,chrom=T)#,filename="test")
LF.mat.order <- orderLG(obj,LG.mat2[[1]])
LF.mat.order <- orderLG(obj,LG.mat2)
floor(10/10)
nSect = 1
order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
snpInd=1:10
order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
length(snpInd)
nSect
cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect))
snpInd = 1:11
nSect <- floor(length(snpInd)/10)
order3 <- order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
floor(length(snpInd)/10)
floor(length(15)/10)
floor(length(1:15)/10)
floor(length(1:20)/10)
snpInd = 1:20
nSect <- floor(length(snpInd)/10)
order3 <- order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
nSect
order3
order3 <- order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
order3
order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
orderLG <- function(obj, LG.list, sigma=10){
if(!is.list(LG.list))
stop("Linkage group object is not a list")
## Define new list for ordered SNPs
LG.mat.ord <- list()
# iterate over the linkage groups
for(lg in 1:length(LG.list)){
snpInd <- LG.list[[lg]]
## optimization based on initial ordering
D1 <- as.dist(obj$rf[snpInd,snpInd])
out1 <- seriate.distLD(D1,method="SPIN_NH_LD",control=list(sigma=sigma,verbose=T))
## Try two other random orders
set.seed(58392+lg*9/3)
order2 <- sample(1:length(snpInd))
if(length(snpInd) > 20){
nSect <- floor(length(snpInd)/10)
order3 <- order(as.numeric(as.character(cut(1:length(snpInd),breaks=nSect,labels=sample(1:nSect)))))
}
else
order3 <- sample(1:length(snpInd))
D2 <- as.dist(obj$rf[snpInd[order2],snpInd[order2]])
D3 <- as.dist(obj$rf[snpInd[order3],snpInd[order3]])
out2 <- seriate.distLD(D2,method="SPIN_NH_LD",control=list(sigma=sigma,verbose=T))
out3 <- seriate.distLD(D3,method="SPIN_NH_LD",control=list(sigma=sigma,verbose=T))
## Find out which has the best ordering and output that order
bestOut <- switch(which.min(c(out1[[2]],out2[[2]],out3[[2]])),1,2,3)
if(bestOut == 1) {
LG.mat.ord[[lg]] <- snpInd[get_order(out1[[1]])]
} else if(bestOut == 2){
LG.mat.ord[[lg]] <- snpInd[order2][get_order(out2[[1]])]
} else if(bestOut == 3){
LG.mat.ord[[lg]] <- snpInd[order3][get_order(out3[[1]])]
}
}
return(LG.mat.ord)
}
LF.mat.order <- orderLG(obj,LG.mat2)
plotLGs(obj, LF.mat.order,chrom=T)#,filename="test")
plotLGs(obj, LG.mat2,chrom=T)#,filename="test")
image(obj$rf[LF.mat.order[[1]],LF.mat.order[[1]]][1:20,1:20])
image(obj$rf[LF.mat.order[[1]],LF.mat.order[[1]]][1:30,1:30])
LF.mat.order[[1]][c(24,25)]
LF.mat.order[[1]][c(5,24,25)]
debug(rf_2pt)
obj <- readRA(genofile,gform,mum,dad,nClust=3, pvalue=0.1,DEPTHthres = 10)
config
obj$config_infer
cbind(config,obj$config_infer)
LF.mat.order[[1]][c(5,24,25)]
config(c(34,25))
config[c(34,25)]
config[c(567,25)]
obj$genon[,567]
table(obj$genon[,567])
table(obj$genon[,34])
table(obj$genon[,25])
ind = c(34,567)
rf.est1 <- rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf.est1
rf.est2 <- rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf.est2
ind[1]
config[ind[1]]
LF.mat.order[[1]][c(4,24,25)]
ind = c(50,34)
config[50]
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 9) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.4,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.01,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.01,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 11) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.01,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 12) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(0.3,depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 9) + 2 * (config[ind] == 5)),
epsilon = NULL)
LF.mat.order[[1]][c(5,8,9,24,25)]
config[c(24,567,568)]
ind=c(568,34)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 1) + 2 * c(config[ind[1]] ==
3, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 2) + 2 * c(config[ind[1]] ==
3, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL, sexSpec=T)
debug(rf_est_FS)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL, sexSpec=T)
ps <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
1:8)))))[-1] - 1
ms <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
c(1:4, 9:12))))))[-1] - 1
npar <- c(length(ps), length(ms))
if (length(init_r) == 1)
para <- logit2(rep(init_r, sum(npar)))
else if (length(init_r) != sum(npar))
para <- logit2(rep(0.1, sum(npar)))
else para <- init_r
if (length(epsilon) != 1 & !is.null(epsilon))
para <- c(para, logit(0.001))
else if (!is.null(epsilon))
para <- c(para, logit(epsilon))
seqErr = !is.null(epsilon)
ps <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
1:8)))))[-1] - 1
ms <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
c(1:4, 9:12))))))[-1] - 1
npar <- c(length(ps), length(ms))
length(init_r) == 1
para <- logit2(rep(init_r, sum(npar)))
para
length(epsilon) != 1 & !is.null(epsilon)
!is.null(epsilon)
seqErr = !is.null(epsilon)
optim.MLE <- optim(para, ll_fs_ss_mp_scaled_err,
method = "BFGS", control = optim.arg, depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat,
Kab = Kab, nInd = nInd, nSnps = nSnps, OPGP = OPGP,
ps = ps, ms = ms, npar = npar, noFam = noFam,
seqErr = !is.null(epsilon))
obj <- readRA(genofile,gform,mum,dad,nClust=3, pvalue=0.1,DEPTHthres = 10)
ind
LF.mat.order[[1]][c(5,8,9,24,25)]
ind = c(568,34)
ind = c(34,568)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
undebug(rf_est_FS)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
ind
table9genon[,ind[1]])
table(genon[,ind[1]])
table(obj$genon[,ind[1]])
table(obj$genon[,ind[2]])
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 4) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
debug(rf_est_FS)
rf.est2 <- rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
para = c(logit(0.01))
seqErr = !is.null(epsilon)
seqErr
optim(para, ll_fs_mp_scaled_err, method = "BFGS",
control = list(reltol = 1e-10), depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat, Kab = Kab,
nInd = nInd, nSnps = nSnps, OPGP = OPGP, noFam = noFam,
seqErr = seqErr)
inv.logit(-2.24175)
para <- logit2(0.2)
optim(para, ll_fs_mp_scaled_err, method = "BFGS",
control = list(reltol = 1e-10), depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat, Kab = Kab,
nInd = nInd, nSnps = nSnps, OPGP = OPGP, noFam = noFam,
seqErr = seqErr)
optim(para, ll_fs_ss_mp_scaled_err, method = "BFGS",
control = list(reltol = 1e-10), depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat, Kab = Kab,
nInd = nInd, nSnps = nSnps, OPGP = OPGP, noFam = noFam,
seqErr = seqErr)
ps <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
1:8)))))[-1] - 1
ms <- sort(unique(unlist(lapply(OPGP, function(x) which(x %in%
c(1:4, 9:12))))))[-1] - 1
npar <- c(length(ps), length(ms))
init_r
para <- logit2(rep(init_r, sum(npar)))
para <- logit2(rep(0.2, sum(npar)))
para
para
ps
ms
LF.mat.order[[1]][1:24]
config(LF.mat.order[[1]][1:24])
config[LF.mat.order[[1]][1:24]]
config[LF.mat.order[[1]][1:24]]
ind
ind=c(24,25)
LF.mat.order[[1]][1:25]
ind=c(30,34)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 9) + 2 * (config[ind] == 5)),
epsilon = NULL)
undebug(rf_est_FS)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 10) + 2 * (config[ind] == 5)),
epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 11) + 2 * (config[ind] == 5)),
epsilon = NULL)
table(genon[,ind[1]])
table(obj$genon[,ind[1]])
table(obj$genon[,ind[2]])
table(obj$genon[,ind[1]], obj$genon[,ind[2]])
LF.mat.order[[1]][c(4,24,25)]\
LF.mat.order[[1]][c(4,24,25)]
LF.mat.order[[1]][c(5,24,25)]
ind = c(567,25)
ind = c(567,34)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(9, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 3) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 1) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
rf_est_FS(depth_Ref = list(obj$depth_Ref[,
ind]), depth_Alt = list(obj$depth_Alt[, ind]),
OPGP = list(c(5, 2) + 2 * c(config[ind[1]] ==
5, 0)), epsilon = NULL)
obj$config
detach("package:GUSMap", unload=T)
library(GUSMap)
rm(orderLG)
obj <- readRA(genofile,gform,mum,dad,nClust=3, pvalue=0.1,DEPTHthres = 10)
LG.mat <- createGroups(obj, parent="maternal",LOD = 10)
LG.mat
LG.mat2 <- addSNPs(obj, LG.mat, LOD=10)
plotLGs(obj, LG.mat2,chrom=T)#,filename="test")
LF.mat.order <- orderLG(obj,LG.mat2)
plotLGs(obj, LF.mat.order,chrom=T)#,filename="test")
LG.mat3 <- addBIsnps(obj, LG.mat2, LOD=10)
LF.mat.order <- orderLG(obj,LG.mat2)
LF.mat.order <- orderLG(obj,LG.mat3)
plotLGs(obj, LF.mat.order,chrom=T)#,filename="test")
obj$config[LF.mat.order[[1]]]
276*4
phaseToOPGP <- function(phase, nSnps, swap=FALSE){
parHap <- matrix("A",nrow=4,ncol=nSnps)
if(swap){
mat <- substr(phase,1,1)
pat <- substr(phase,2,2)
}
else{
pat <- substr(phase,1,1)
mat <- substr(phase,2,2)
}
## Sort out any duplicates
if(any(pat=='d')|any(mat=='u')){
pat[which(pat == 'd')] <- pat[which(pat == 'd')-1]
mat[which(mat == 'd')] <- pat[which(mat == 'd')-1]
}
parHap[cbind(suppressWarnings(as.numeric(pat))+1,1:nSnps)] <- "B"
parHap[cbind(suppressWarnings(as.numeric(mat))+3,1:nSnps)] <- "B"
## make sure the baseline phase is correct
if(parHap[1,which(apply(parHap[1:2,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[1:2,] <- parHap[2:1,]
if(parHap[3,which(apply(parHap[3:4,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[3:4,] <- parHap[4:3,]
## Convert the parental haplotypes into phase numbers
OPGP <- parHapToOPGP(parHap)
}
### Function for estimating rf with LM
est_LM <- function(genon, depth_Ref, depth_Alt, config, filename = "MKdata_11"){
## generate the data
genoToOtherFormats(genon = genon, depth_Ref = depth_Ref, depth_Alt = depth_Alt, config=config,formats=list(lepmap=T,joinmap=T,crimap=T,onemap=T),
filename=filename, direct="../Data/", thres=NULL)
write(1:ncol(genon),file = "../Data/fixOrder_LM.txt", ncolumns=1)
## Compute rf estimates using error parameters
system(paste0("java -cp ../../../Simulations/LepMap2/bin/ OrderMarkers evaluateOrder=../Data/fixOrder_LM.txt data=../Data/",filename,
"_LepMap.txt improveOrder=0 sexAveraged=1 useKosambi=2 removeDuplicates=0 >res_",filename,"_LM.txt"))
LP.res_err <- read.table(file=paste0("res_",filename,"_LM.txt"),sep="\t",quote="#",skip=3,row.names = 1,stringsAsFactors=F)
LP.phase_err <- phaseToOPGP(LP.res_err[,4],ncol(genon))
rf.est_err <- diff(LP.res_err[,1])
## Compute rf estimates using no error parameter
system(paste0("java -cp ../../../Simulations/LepMap2/bin/ OrderMarkers evaluateOrder=../Data/fixOrder_LM.txt data=../Data/",filename,
"_LepMap.txt improveOrder=0 sexAveraged=1 useKosambi=2 learnErrorParameters=0 initError=0 removeDuplicates=0 >res_",filename,"_LM.txt"))
LP.res <- read.table(file=paste0("res_",filename,"_LM.txt"),sep="\t",quote="#",skip=3,row.names = 1,stringsAsFactors=F)
LP.phase <- phaseToOPGP(LP.res[,4],ncol(genon))
rf.est <- diff(LP.res[,1])
return(list(list(rf.est_err,LP.phase_err,LP.res_err),list(rf.est,LP.phase,LP.res)))
}
#### For extracting the results out of JM
est_JM <- function(resultsFile,nSnps) { sapply(which(readLines(resultsFile)=="best map order:")+15+seq(0,((nSnps-1)*3-2),3),function(x){
tempV <- strsplit(readLines(resultsFile)[x],"\\s+")[[1]]
return(as.numeric(tempV[length(tempV)-2]))
})
}
#### For CriMap
est_CM <- function(filename, nSnps){
setwd("../Data")
cat(paste0(rep("n",4),sep="\n"),"4\n",paste(0:(nSnps-1),collapse=" ")," *\n","y", file="run_MK.txt", sep="")
system(paste0("../../../Simulations/CriMap/bin/crimap 1_",filename," prepare <run_MK.txt"))
system(paste0("../../../Simulations/CriMap/bin/crimap 1_",filename," fixed >cm_out.txt"))
out <- readLines("cm_out.txt")
findx <- which(substr(out,1,6) == "Sex_av") + 3
results <- as.numeric(sapply(seq(findx,findx+(nSnps-1)*2-1,2),function(x){
return(strsplit(out[x],"\\s+")[[1]][2])
}))
system(paste0("rm chr1_",filename,".dat"))
system(paste0("rm chr1_",filename,".loc"))
system(paste0("rm chr1_",filename,".par"))
setwd("../Aligned2/")
return(results)
}
est_OM <- function(filename, nSnps){
OM_simData <<- read.outcross(file=paste0("../Data/",filename,"_OneMap.txt"))
## Compute the 2 point estimates
OM_2p <<- rf.2pts(OM_simData,LOD=0)
## Create the map
OM_temp <- make.seq(OM_2p,'all')
OM_temp <- map(OM_temp,1:nSnps)
return(list(OM_temp$seq.rf,phaseToOPGP_OM(OM_temp)))
}
######################## Under take the analysis
library(GUSMap)
library(onemap)
manuka <- Manuka11()
## To access the RA directly
RAname <- system.file("extdata", "Manuka11.txt.gz", package="GUSMap")
RAdata <- read.table(RAname, header=T)
## Work out the segregation types
config <- unlist(apply(manuka$genon[1:4,],2,function(x){
x_p = x[1:2]; x_m = x[3:4]
if(any(x_p==1,na.rm=T) & any(x_m==1,na.rm=T))
return(1)
else if(all(x_m==2,na.rm=T) & any(x_p==1, na.rm=T))
return(2)
else if(all(x_m==0,na.rm=T) & any(x_p==1, na.rm=T))
return(3)
else if(all(x_p==2,na.rm=T) & any(x_m==1,na.rm=T))
return(4)
else if(all(x_p==0,na.rm=T) & any(x_m==1,na.rm=T))
return(5)
}))
## SNPs removed due to mis-ordering
badSnps <- rep(FALSE, ncol(manuka$genon))
badSnps[c(3:14,16,18:23,25:27,29,33:35,39:42,44,46:49,
53,58:60,63,65:67,69:74,76,77,85,104,114:129,
152,162,163,173:180,187:190,206:208,210,212,213,
216,228,272,285,286,298,304,314,318,320,342,344,345,
354,358,370,373,380,389,390,397,408,411,421,427,
437,446,469,493,498:500,506,510,516,519,522,531,
543,553,556,569,582,585,601,617,620,623,628,635,
636:643,647:650,669:680)] <- TRUE
ind_rd6 <- which(colMeans(manuka$depth_Ref[-c(1:4),] + manuka$depth_Alt[-c(1:4),],na.rm=T ) < 6 & !badSnps)
getwd()
install.packages("roxygen2")
library(roxygen2)
install.packages("xml2")
load("/mnt/maybe/home/tbilton/PhD/Papers/Paper1/Code/Final/Manuka_Final.RData")
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_LM_rd6[[2]][[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=rep(c(myCol[1],'black'),2))
abline(v=0.475,lty=2)
text(x = 0.25, y=1050, labels="Low")
text(x = 0.75, y=1051, labels="High")
png("manuka_NZSA.png",width=1000,height=1500, res=300, pointsize=12, family="Arial",type='cairo')
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_LM_rd6[[2]][[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=rep(c(myCol[1],'black'),2))
abline(v=0.475,lty=2)
text(x = 0.25, y=1050, labels="Low")
text(x = 0.75, y=1051, labels="High")
dev.off()
library(onemap)
png("manuka_NZSA.png",width=1000,height=1500, res=300, pointsize=12, family="Arial",type='cairo')
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_LM_rd6[[2]][[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=rep(c(myCol[1],'black'),2))
abline(v=0.475,lty=2)
text(x = 0.25, y=1050, labels="Low")
text(x = 0.75, y=1051, labels="High")
dev.off()
png("manuka_NZSA_subset.png",width=800,height=1500, res=300, pointsize=12, family="Arial",type='cairo')
par(oma=c(0,0,0,0),xpd=NA)
rf = list(rf_GM_rd6[[1]],rf_GM_high[[1]],rf_LM_high[[2]][[1]])
plotLM(rf = rf,names=NULL,col=c(myCol[1],myCol[1],'black'))
abline(v=0.225,lty=2)
text(x = 0.1, y=115, labels="Low")
text(x = 0.5, y=115.5, labels="High")
dev.off()
getwd()
install.packages("devtools")
library(devtools)
sessionInfo()
getwd()
setwd("GUSMap/")
document()
library(lintr)
document()
sessionInfo()
roxygen()
roxygen2::roxygenise()
session_info()
install.packages(c("git2r", "memoise", "stringi", "withr", "xml2"))
getwd()
library(devtools)
document()
?optim
document()
