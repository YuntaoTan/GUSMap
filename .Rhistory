r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
setwd("GUSMap/")
library(devtools)
bulid()
build()
install.packages("~/GUSMap_0.2.0.tar.gz", repos = NULL, type = "source")
library(GUSMap)
library(marqLevAlg)
ll_fs_mp_scaled_err <- function (para)
{
r <- inv.logit2(para[1:(nSnps - 1)])
if (seqErr)
epsilon = inv.logit(para[nSnps])
else epsilon = 0
llval = 0
Kaa <- Kbb <- vector(mode = "list", length = noFam)
for (fam in 1:noFam) {
Kaa[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Ref[[fam]] *
epsilon^depth_Alt[[fam]]
Kbb[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Alt[[fam]] *
epsilon^depth_Ref[[fam]]
}
for (fam in 1:noFam) llval = llval + .Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
return(llval)
}
tt <- simFS(rVec_f = 0.01,epsilon = 0.01,config = c(1,4,2,1,2),nInd = 100,meanDepth = 6,NoDS = 1,formats = NULL)
depth_Ref <- list(tt$depth_Ref )
depth_Alt <- list(tt$depth_Alt )
nSnps = as.integer(tt$nSnps )
bcoef_mat = list(choose(depth_Ref[[1]] + depth_Alt[[1]],depth_Ref[[1]]))
nInd = list(as.integer(tt$nInd))
OPGP = list(tt$OPGP)
rf = tt$rVec_f
epsilon = tt$epsilon
noFam = 1
test = rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP, )
test
marqLevAlg(c(rep(0.01,nSnps-1),0.01),fn=ll_fs_mp_scaled_err)
seqErr=T
marqLevAlg(c(rep(0.01,nSnps-1),0.01),fn=ll_fs_mp_scaled_err)
tt <- simFS(rVec_f = 0.01,epsilon = 0.01,config = c(1,4,2,1,2),nInd = 100,meanDepth = 6,NoDS = 1,formats = NULL)
depth_Ref <- list(tt$depth_Ref )
depth_Alt <- list(tt$depth_Alt )
nSnps = as.integer(tt$nSnps )
bcoef_mat = list(choose(depth_Ref[[1]] + depth_Alt[[1]],depth_Ref[[1]]))
Kab = bcoef_mat[[1]] * (1/2) ^ (depth_Ref[[1]] + depth_Alt[[1]])
nInd = list(as.integer(tt$nInd))
OPGP = list(tt$OPGP)
rf = tt$rVec_f
epsilon = tt$epsilon
noFam = 1
marqLevAlg(c(rep(0.01,nSnps-1),0.01),fn=ll_fs_mp_scaled_err)
marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)
debug(ll_fs_mp_scaled_err)
marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)
r
epsilon
Kaa
Kaa
Kab
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
llval
llval
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
llval = 0
llval
llval + .Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
llval
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
Kbb[[fam]]
Kab[[fam]]
r
Kaa[[fam]]
nSnps
nInd[[fam]]
OPGP[[fam]]
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
nSnps
Kab
r
fam
Kbb[[fam]]
dim(Kbb[[fam]])
marqLevAlg
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
Kaa[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Ref[[fam]] *
epsilon^depth_Alt[[fam]]
Kbb[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Alt[[fam]] *
epsilon^depth_Ref[[fam]]
fam =1
Kaa[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Ref[[fam]] *
epsilon^depth_Alt[[fam]]
Kbb[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Alt[[fam]] *
epsilon^depth_Ref[[fam]]
Kaa <- Kbb <- vector(mode = "list", length = noFam)
Kaa[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Ref[[fam]] *
epsilon^depth_Alt[[fam]]
Kbb[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Alt[[fam]] *
epsilon^depth_Ref[[fam]]
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
r
r = c(0.01,0.01,0.01,0.01)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps, PACKAGE = "GUSMap")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
getwd()
dyn.load("src/likelihoods.so")
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
.Call("ll_fs_scaled_err_c", r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],nSnps)
dyn.unload("src/likelihoods.so")
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
debug(ll_fs_ss_mp_scaled_err)
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
debug(ll_fs_mp_scaled_err)
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
debug(GUSMap:::ll_fs_mp_scaled_err)
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
undebug(GUSMap:::ll_fs_mp_scaled_err)
debug(ll_fs_mp_scaled_err)
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
llval
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps, PACKAGE="GUSMap")
r
Kaa[[fam]]
detach("package:GUSMap", unload=T)
dyn.load("src/likelihoods.so")
ll_fs_mp_scaled_err <- function (para)
{
r <- inv.logit2(para[1:(nSnps - 1)])
if (seqErr)
epsilon = inv.logit(para[nSnps])
else epsilon = 0
llval = 0
Kaa <- Kbb <- vector(mode = "list", length = noFam)
for (fam in 1:noFam) {
Kaa[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Ref[[fam]] *
epsilon^depth_Alt[[fam]]
Kbb[[fam]] <- bcoef_mat[[fam]] * (1 - epsilon)^depth_Alt[[fam]] *
epsilon^depth_Ref[[fam]]
}
for (fam in 1:noFam) llval = llval + .Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
return(llval)
}
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
source("R/transformations.R")
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
debug(ll_fs_mp_scaled_err)
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]], nInd[[fam]],
nSnps)
nSnps
Kab[[fam]]
Kab
Kab[[fam]]
Kaa
fam
Kab[[fam]]
Kab[[fam]]
Kab[[fam]]
Kab[[fam]]
Kab[[fam]]
Kab[[fam]]
Kbb[[fam]]
Kbb[[fam]]
Kab = list(bcoef_mat[[1]] * (1/2) ^ (depth_Ref[[1]] + depth_Alt[[1]]) )
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.01,4)),logit(0.01)))
marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)
undebug(ll_fs_mp_scaled_err)
marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)
test
test2 <- marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)
test2
test2$v
print(test2)
summary(test2)
summary(test2)[,1]
summary(test2)[[1]][,1]
str(summary(test2))
summary(test2)$Values
summary(test2)$coef
inv.logit2(logitsummary(test2)$coef)
inv.logit2(summary(test2)$coef)
inv.logit2(as.numeric(summary(test2)$coef))
logit2(-2.914323)
inv.logit2(-2.914323)
test
inv.logit2(-31.1138)
inv.logit2(-5.067645)
inv.logit2(-2.247478)
inv.logit2(-4.352316)
inv.logit(-4.352316)
test2
library(microbenchmark)
system.time({marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)})
test2
system.time({rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)})
library(GUSMap)
system.time({rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)})
system.time({rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)})
debug(rf_est_FS)
rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)
system.time({optim.MLE <- optim(para, ll_fs_mp_scaled_err, method = "BFGS",
control = optim.arg, depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat,
Kab = Kab, nInd = nInd, nSnps = nSnps, OPGP = OPGP,
noFam = noFam, seqErr = seqErr)})
system.time({optim.MLE <- optim(para, ll_fs_mp_scaled_err, method = "BFGS",
control = optim.arg, depth_Ref = depth_Ref,
depth_Alt = depth_Alt, bcoef_mat = bcoef_mat,
Kab = Kab, nInd = nInd, nSnps = nSnps, OPGP = OPGP,
noFam = noFam, seqErr = seqErr)})
tt <- simFS(rVec_f = 0.01,epsilon = 0.01,config = c(1,4,2,1,2,2,1,4,1,2,1,4,1,2,2,1,2,2,4,4,2,1,2,1,4,1,4),nInd = 100,meanDepth = 6,NoDS = 1,formats = NULL)
depth_Ref <- list(tt$depth_Ref )
depth_Alt <- list(tt$depth_Alt )
nSnps = as.integer(tt$nSnps )
bcoef_mat = list(choose(depth_Ref[[1]] + depth_Alt[[1]],depth_Ref[[1]]))
Kab = list(bcoef_mat[[1]] * (1/2) ^ (depth_Ref[[1]] + depth_Alt[[1]]) )
nInd = list(as.integer(tt$nInd))
OPGP = list(tt$OPGP)
rf = tt$rVec_f
epsilon = tt$epsilon
noFam = 1
test2 <- marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)
system.time({rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)})
undebug(rf_est_FS)
system.time({rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)})
system.time({test <- rf_est_FS(0.01,0.01,depth_Ref,depth_Alt,OPGP)})
test
inv.logit(test$rf)
test2
tt <- simFS(rVec_f = 0.01,epsilon = 0.01,config = c(1,4,2,1,2,2,1,4,1,2,1,4,1,2,2,1,2,2,4,4,2,1,2,1,4,1,4),nInd = 100,meanDepth = 6,NoDS = 1,formats = NULL)
depth_Ref <- list(tt$depth_Ref )
depth_Alt <- list(tt$depth_Alt )
nSnps = as.integer(tt$nSnps )
bcoef_mat = list(choose(depth_Ref[[1]] + depth_Alt[[1]],depth_Ref[[1]]))
Kab = list(bcoef_mat[[1]] * (1/2) ^ (depth_Ref[[1]] + depth_Alt[[1]]) )
nInd = list(as.integer(tt$nInd))
OPGP = list(tt$OPGP)
rf = tt$rVec_f
epsilon = tt$epsilon
noFam = 1
OPGP
rf
system.time({test <- rf_est_FS(0.1,0.0001,depth_Ref,depth_Alt,OPGP)})
test
inv.logit(test$rf)
debug(ll_fs_mp_scaled_err)
inv.logit(test$rf)
system.time({test <- rf_est_FS(0.1,0.0001,depth_Ref,depth_Alt,OPGP)})
undebug(ll_fs_mp_scaled_err)
tt <- simFS(rVec_f = 0.01,epsilon = 0.01,config = c(1,4,2,1,2,2,1,4,1,2,1,4,1,2,2,1,2,2,4,4,2,1,2,1,4,1,4),nInd = 100,meanDepth = 6,NoDS = 1,formats = NULL)
depth_Ref <- list(tt$depth_Ref )
depth_Alt <- list(tt$depth_Alt )
nSnps = as.integer(tt$nSnps )
f_mat = list(choose(depth_Ref[[1]] + depth_Alt[[1]],depth_Ref[[1]]))
depth_Ref <- list(tt$depth_Ref )
depth_Alt <- list(tt$depth_Alt )
nSnps = as.integer(tt$nSnps )
bcoef_mat = list(choose(depth_Ref[[1]] + depth_Alt[[1]],depth_Ref[[1]]))
Kab = list(bcoef_mat[[1]] * (1/2) ^ (depth_Ref[[1]] + depth_Alt[[1]]) )
nInd = list(as.integer(tt$nInd))
OPGP = list(tt$OPGP)
rf = tt$rVec_f
epsilon = tt$epsilon
noFam = 1
OPGP
nInd
nSNps
nSnps
epsilon
kAB
Kab
ll_fs_mp_scaled_err(c(logit2(rep(0.01)),logit(0.01))
)
ll_fs_mp_scaled_err(c(logit2(rep(0.01,nSnps-1)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.005,nSnps-1)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.02,nSnps-1)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.04,nSnps-1)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.4,nSnps-1)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.5,nSnps-1)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.4,nSnps-1)),logit(0.01)))
ll_fs_mp_scaled_err(c(logit2(rep(0.25,nSnps-1)),logit(0.01)))
test <- rf_est_FS(0.1,0.0001,depth_Ref,depth_Alt,OPGP)
test
logit(test$rf)
logit2(test$rf)
inv.logit2(test$rf)
inv.logit(test$rf)
inv.logit2(test$rf)
r
para
debug(GUSMap:ll_fs_mp_scaled_err)
debug(GUSMap:::ll_fs_mp_scaled_err)
test <- rf_est_FS(0.1,0.0001,depth_Ref,depth_Alt,OPGP)
r
r
r
r
r
r
r
r
r
r
r
r
para
.Call("ll_fs_scaled_err_c",
r, Kaa[[fam]], Kab[[fam]], Kbb[[fam]], OPGP[[fam]],
nInd[[fam]], nSnps)
r
round(r,5)
test
tt <- simFS(rVec_f = 0.01,epsilon = 0.01,config = c(1,1,2,1,2,2,1,4,1,2,1,4,1,2,2,1,2,2,4,4,2,1,2,1,4,1,4),nInd = 100,meanDepth = 6,NoDS = 1,formats = NULL)
depth_Ref <- list(tt$depth_Ref )
depth_Alt <- list(tt$depth_Alt )
nSnps = as.integer(tt$nSnps )
bcoef_mat = list(choose(depth_Ref[[1]] + depth_Alt[[1]],depth_Ref[[1]]))
Kab = list(bcoef_mat[[1]] * (1/2) ^ (depth_Ref[[1]] + depth_Alt[[1]]) )
nInd = list(as.integer(tt$nInd))
OPGP = list(tt$OPGP)
rf = tt$rVec_f
epsilon = tt$epsilon
noFam = 1
marqLevAlg(c(logit2(rep(0.01,nSnps-1)),logit(0.01)),fn=ll_fs_mp_scaled_err)
