nRuns <- 1000  # Number of iterations in the MC simulation
nSnps <- 12   # Number of loci (or SNPs)
rVec <- sapply(rep(0.01,12), function(r) c(r,1-r),simplify=F)
# Simulate the segregation type of each marker. 1=informative, 2=paternal segregating, 3= maternal segregating
config <- c(2,1,1,3,3,1,2,3,2,1,1,3)
# Generate the parental haplotypes
set.seed(11984321)
parHap <- matrix(rep(paste0(rep("A",nSnps)),4),nrow=4)
parHap[cbind(sample(1:2,size=sum(config==2),replace=T),which(config==2))] <- "B"
parHap[cbind(sample(3:4,size=sum(config==3),replace=T),which(config==3))] <- "B"
parHap[cbind(c(sample(1:2,size=sum(config==1),replace=T),sample(3:4,size=sum(config==1),replace=T)),rep(which(config==1),2))] <- "B"
if(parHap[1,which(apply(parHap[1:2,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[1:2,] <- parHap[2:1,]
if(parHap[3,which(apply(parHap[3:4,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[3:4,] <- parHap[4:3,]
## Convert the parental haplotypes into phase numbers
OPGP <- parHapToOPGP(parHap)
rd_dist="NegBinom"
set.seed(843235)
depths <- 2
lp <- simData(rVec_f = rVec,rVec_m = rVec,nSnps = nSnps,parHap = parHap,nInd = nInd,meanDepth = depths,config=config,thres=5,formats=NULL,rd_dist = rd_dist)
lp
apply(lp,2,function(x) sum(is.na(x)))
apply(lp[[1]],2,function(x) sum(is.na(x)))
lp[[2]][,1]
hist(lp[[2]][,1])
simData
lp <- simData(rVec_f = rVec,rVec_m = rVec,nSnps = nSnps,parHap = parHap,nInd = nInd,meanDepth = depths,config=config,thres=5,formats=list(lepmap=T),rd_dist = rd_dist)
lp <- rea.table("_LepMap.txt")
lp <- read.table("_LepMap.txt")
lp[,7]
sum(lp[,7] == 0)
sum(lp[,9] == 0)
sum(lp[,10] == 0)
sum(lp[,11] == 0)
sum(lp[,13] == 0)
sum(lp[,15] == 0)
sum(lp[,17] == 0)
sum(lp[,19] == 0)
sum(lp[,21] == 0)
sum(lp[,23] == 0)
sum(lp[,25] == 0)
sum(lp[,27] == 0)
pnbinom(4,mu=2,size=2)
pnbinom(2,mu=2,size=2)
pnbinom(1,mu=2,size=2)
?runif
q()
library(devtools)
setwd("./GBSanalysis/")
build()
cd
setwd("../")
install.packages("~/GBSanalysis_0.0.1.tar.gz", repos = NULL, type = "source")
library(GBSanalysis)
simPlot
getwd()
install.packages("~/GBSanalysis_0.0.1.tar.gz", repos = NULL, type = "source")
library(GBSanalysis)
simPlot
q()
setwd("GBSanalysis/")
library(devtools)
build()
setwd("../")
install.packages("~/GBSanalysis_0.0.1.tar.gz", repos = NULL, type = "source")
library(GBSanalysis)
simPlot
q()
setwd("./GBSanalysis/")
library(devtools)
build()
setwd("../")
install.packages("~/GBSanalysis_0.0.1.tar.gz", repos = NULL, type = "source")
install.packages("~/GBSanalysis_0.0.1.tar.gz", repos = NULL, type = "source")
q()
library(qtl)
install.packages("qtl")
library(qtl)]
library(qtl)
est.rf()
sim.map
sim.map(len=haldane(0.01),n.mar=2,2)
library(onemap)
library(onemap)
sim.map(len=haldane(0.01),n.mar=2,2)
haldane(0.01)
sim.cross(sim.map(len=haldane(0.01),n.mar=2,2),nind=25,type='4way')
sim.map(len=haldane(0.01),n.mar=2,2,sex.sp = T)
sim.map(len=rep(haldane(0.01),2),n.mar=2,2,sex.sp = T)
sim.map(len=haldane(0.01),n.mar=2,2,sex.sp = T)
sim.map(len=haldane(0.01),n.mar=2,2,sex.sp = T)
sim.map(len=haldane(0.01),n.mar=2,2,sex.sp = T)
sim.map(len=replicate(2,haldane(0.01)),n.mar=2,2,sex.sp = T)
sim.map(len=replicate(2,haldane(0.01),simplify=T),n.mar=2,2,sex.sp = T)
replicate(2,haldane(0.01),simplify=T)
sim.map(len=rep(haldane(0.01),2),simplify=T),n.mar=2,2,sex.sp = T)
sim.map(len=rep(haldane(0.01),2),n.mar=2,2,sex.sp = T)
sim.cross(map =  sim.map(len=rep(haldane(0.01),2),n.mar=2,2,sex.sp = T),type='4way',n.ind=25)
est.rf(sim.cross(map =  sim.map(len=rep(haldane(0.01),2),n.mar=2,2,sex.sp = T),type='4way',n.ind=25))
?est.rf
tt <- est.rf(sim.cross(map =  sim.map(len=rep(haldane(0.01),2),n.mar=2,2,sex.sp = T),type='4way',n.ind=25))
tt
summary(tt)
tt <- sim.cross(map =  sim.map(len=rep(haldane(0.01),2),n.mar=2,2,sex.sp = T),type='4way',n.ind=25)
tt
est.ef(tt)
est.rf(tt)
tt2 <- est.rf(tt)
plot(tt2)
rmultinom(25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
>rmultinom(25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
?rmultinom(25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
?rmultinom(4,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(4,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
r=0.01
rmultinom(4,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
rmultinom(1,25,prob=c((1-r)^2,(1-r)*r,r^2,(1-r)^2+r^2))
library(GBSanalysis)
nRuns <- 1000  # Number of iterations in the MC simulation
nSnps <- 12   # Number of loci (or SNPs)
rVec <- sapply(rep(0.01,12), function(r) c(r,1-r),simplify=F)
# Simulate the segregation type of each marker. 1=informative, 2=paternal segregating, 3= maternal segregating
#config <- c(2,1,1,3,3,1,2,3,2,1,1,3)
config <- c(2,1,1,3,2,3,1,1,3,1,2,1)
# Generate the parental haplotypes
set.seed(11984321)
parHap <- matrix(rep(paste0(rep("A",nSnps)),4),nrow=4)
parHap[cbind(sample(1:2,size=sum(config==2),replace=T),which(config==2))] <- "B"
parHap[cbind(sample(3:4,size=sum(config==3),replace=T),which(config==3))] <- "B"
parHap[cbind(c(sample(1:2,size=sum(config==1),replace=T),sample(3:4,size=sum(config==1),replace=T)),rep(which(config==1),2))] <- "B"
if(parHap[1,which(apply(parHap[1:2,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[1:2,] <- parHap[2:1,]
if(parHap[3,which(apply(parHap[3:4,],2,function(x) !(all(x=='A'))))[1]] == 'B')
parHap[3:4,] <- parHap[4:3,]
## Convert the parental haplotypes into phase numbers
OPGP <- parHapToOPGP(parHap)
rd_dist="NegBinom"
newData <- simData(rVec,rVec,config=NULL,parHap,nSnps,nInd=10000 %/% (12*meanDepth),meanDepth=20, rd_dist="Neg_Binom")
newData <- simData(rVec,rVec,config=NULL,parHap,nSnps,nInd=100,meanDepth=20, rd_dist="Neg_Binom")
table(newData[[3]][,1],newData[[3]][,2])
table(factor(newData[,1],levels=1:3,labels=1:3),factor(newData[,2],levels=1:3,labels=1:3))
table(factor(newData[[3]][,1],levels=1:3,labels=1:3),factor(newData[[3]][,2],levels=1:3,labels=1:3))
genoC <- table(factor(newData[[3]][,1],levels=0:2,labels=0:2),factor(newData[[3]][,2],levels=0:2,labels=0:2))
genoC
newData <- simData(rVec,rVec,config=NULL,parHap,nSnps,nInd=100000,meanDepth=20, rd_dist="Neg_Binom")
table(newData[[1]][,1],newData[[2]][,2])
table(newData[[3]][,1],newData[[3]][,2])
(24785+24827)/sum(table(newData[[3]][,1],newData[[3]][,2]))
(251+267)/sum(table(newData[[3]][,1],newData[[3]][,2]))
newData <- simData(rVec,rVec,config=NULL,parHap,nSnps,nInd=10000 %/% (12*meanDepth),meanDepth=20, rd_dist="Neg_Binom")
debug(simData)
newData <- simData(list(c(0.01,0.99)),list(c(0.01,0.99)),config=NULL,matrix(c('A','A','B','B','A','A','A','B'), nrow=4,ncol=2, byrow=T),2,nInd=20,meanDepth=2, rd_dist="Neg_Binom")
mIndx
table(mIndx[,1])
table(mIndx[,2])
table(geno[,1])
table(geno[,2])
mIndx
cbind(mIndx,geno)
cbind(mIndx,geno)
genon
geno
cbind(mIndx,rbind(geno,geno))
geno2 <- (geno == "AA") * 2 + (geno == "AB") * 1
cbind(mIndx,rbind(geno,geno),rbind(geno2,genon2))
cbind(mIndx,rbind(geno,geno),rbind(geno2,geno2))
list(geno)
geno
table(geno[,1])
table(geno[,2])
library(GBSanalysis)
newData <- simData(list(c(0.01,0.99)),list(c(0.01,0.99)),config=NULL,matrix(c('A','A','B','B','A','A','A','B'), nrow=4,ncol=2, byrow=T),2,nInd=1000000,meanDepth=2, rd_dist="Neg_Binom")
debug(simData)\
debug(simData)
newData <- simData(list(c(0.01,0.99)),list(c(0.01,0.99)),config=NULL,matrix(c('A','A','B','B','A','A','A','B'), nrow=4,ncol=2, byrow=T),2,nInd=1000000,meanDepth=2, rd_dist="Neg_Binom")
table(geno[,1])
table(geno[,1])/1000000
table(geno[,1])/2000000
table(geno[,2])/2000000
table(geno[,1])/2000000
table(geno[,1])/1000000
table(geno[,2])/1000000
table(geno[,1],geno[,2])/1000000
nInd=10000000
mIndx <- matrix(c(sample(c(0, 1), size = 2 * nInd, replace = T)),
ncol = 1)
for (i in 1:(nSnps - 1)) {
newmIndx_f <- numeric(nInd)
newmIndx_m <- numeric(nInd)
for (j in 2:(nInd)) {
newmIndx_f[j] <- sample(c(0, 1), size = 1, prob = c(rVec_f[[i]][(mIndx[j,
i] == 0) + 1], rVec_f[[i]][(mIndx[j, i] == 1) +
1]))
newmIndx_m[j] <- sample(c(0, 1), size = 1, prob = c(rVec_m[[i]][(mIndx[j +
nInd, i] == 0) + 1], rVec_m[[i]][(mIndx[j +
nInd, i] == 1) + 1]))
}
mIndx <- cbind(mIndx, c(newmIndx_f, newmIndx_m))
}
geno <- rbind(sapply(1:nSnps, function(x) parHap[mIndx[1:nInd,
x] + 1, x]), sapply(1:nSnps, function(x) parHap[mIndx[1:nInd +
nInd, x] + 3, x]))
mIndx <- matrix(c(sample(c(0, 1), size = 2 * nInd, replace = T)),
ncol = 1)
for (i in 1:(nSnps - 1)) {
newmIndx_f <- numeric(nInd)
newmIndx_m <- numeric(nInd)
for (j in 2:(nInd)) {
newmIndx_f[j] <- sample(c(0, 1), size = 1, prob = c(rVec_f[[i]][(mIndx[j,
i] == 0) + 1], rVec_f[[i]][(mIndx[j, i] == 1) +
1]))
newmIndx_m[j] <- sample(c(0, 1), size = 1, prob = c(rVec_m[[i]][(mIndx[j +
nInd, i] == 0) + 1], rVec_m[[i]][(mIndx[j +
nInd, i] == 1) + 1]))
}
mIndx <- cbind(mIndx, c(newmIndx_f, newmIndx_m))
}
geno <- rbind(sapply(1:nSnps, function(x) parHap[mIndx[1:nInd,
x] + 1, x]), sapply(1:nSnps, function(x) parHap[mIndx[1:nInd +
nInd, x] + 3, x]))
table(geno[,1])/10000000
table(geno[,2])/20000000
geno <- sapply(1:nSnps, function(y) {
tempGeno <- geno[, y]
sapply(1:nInd, function(x) paste(sort(c(tempGeno[x],
tempGeno[x + nInd])), collapse = ""))
})
table(geno[,1])/10000000
table(geno[,2])/10000000
table(geno[,1],geno[,2])/10000000
mIndx[1,]
logit2(-1)
library(ASmap)
install.packages("ASMap")
library(ASMao)
library(ASMap)
?ASMap
?pullCross
?mstmap.data.frame
otype(sum)
library(plyr)
otype(sum)
otype(sum)
library(pryr)
install.packages("pryr")
library(pryr)
?pryr
otype(sum)
?otype(sum)
?otype(list)
otype(list)
otype(lm)
otype(mstmap)
tt <- sum(rep(4,3))
otype(tt)
tt
y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
nLL <- function(lambda) - sum(dpois(y, lambda, log = TRUE))
fit <- mle(nLL, start = list(lambda = 5), nobs = length(y))
y
nLL
fit
library(GBSanalysis)
simData
if(4){print('yes')}
if("AA"){print('yes')}
?simFounderSnps
is.numeric(Inf)
is.integer(Inf)
is.integer(3)
is.integer(as.integer(3))
as.integer(3.42)
as.integer("a")
is.integer(as.integer("a"))
y <- c(26, 17, 13, 12, 20, 5, 9, 8, 5, 4, 8)
nLL <- function(lambda) - sum(dpois(y, lambda, log = TRUE))
y
nLL
mle(nLL, start = list(lambda = 5), nobs = length(y))
library(stats4)
mle(nLL, start = list(lambda = 5), nobs = length(y))
fit <- mle(nLL, start = list(lambda = 5), nobs = length(y))
isS4(fit)
isS4(mle)
isS4(config)
config
otype(fit)
otype(config)
otype(simData)
install.packages("BrailleR")
"A" < 0
"!" < 0
dim(c(2.2))
dim(c(2,2))
array(c(1))
is.numeric(array(c(1)))
is.numeric(array(c(1),1))
array(c(1),1)
array(c(1,1))
is.numeric(array(c(1,1),1))
is.numeric(array(c(1,1,1),1))
is.numeric(array(c(1,1,1),c(1,1,1),1))
is.numeric(array(c(1,1,1),c(1,1,1),2))
is.numeric(array(c(1,1,1)))
array(c(1,1,1))
array(c(1,1,1),2)
array(c(1,1,1),3)
array(c(1,1,1),4)
array(c(1,1,1),c(1,2))
is.numeric(array(c(1,1,1),c(1,2)))
is.numeric(array(c(1,1,1),c(2,2)))
array(c(1,1,1),c(2,2))
dim(array(c(1,1,1),c(2,2)))
length(array(c(1,1,1),c(2,2)))
length(array(c(1,1,1),c(2,1)))
dim(array(c(1,1,1),c(2,1)))
is.vector
is.vector(config)
is.vector(array(1,c(2,2)))
is.vector(c("A","A"))
is.character(4)
paste(" ",NULL)
?is.integer
round(Inf)
!is.numeric(NULL)
library(GusMap)
simFS(NULL,NULLmNULL,NULL,NULL,3,formats=NULL)
simFS("a",NULL,NULL,NULL,NULL,3,formats=NULL)
simFS(0.1,NULL,NULL,NULL,NULL,3,formats=NULL)
simFS(0.1,0.1,NULL,NULL,NULL,3,formats=NULL)
is.numeric(NULL)
!is.numeric(NULL)
5000 < Inf
Inf < Inf
Inf > Inf
"A" < Inf
"!" < Inf
"*" < Inf
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" < Inf
NULL < Inf
!(NULL < Inf)
if(!is.numeric("A") || !(NULL < Inf)) print('yes')
if(!is.numeric("A") | !(NULL < Inf)) print('yes')
if(!is.numeric("A") || !is.finite(NULL)) print('yes')
source('/mnt/maybe/home/tbilton/GusMap/R/simulate.R')
simFS("a",NULL,NULL,NULL,NULL,3,formats=NULL)
simFS(0.1,0.1,NULL,NULL,NULL,3,formats=NULL)
simFS(0.1,0.1,NULL,4,NULL,3,formats=NULL)
simFS(0.1,0.1,NULL,4,4,3,formats=NULL)
simFS(0.1,0.1,c(1,3,5,4.4),4,4,3,formats=NULL)
simFS(0.1,0.1,c(1,3,5,4),4,4,3,formats=NULL)
debug(simFS)
simFS(0.1,0.1,c(1,3,5,4),4,4,3,formats=NULL)
!is.numeric(config)
!is.vector(config)
length(config) != nSnps
nSnps
round(config)
config == round(config)
all(config == round(config))
cinfig
config
round(config)
all(!(config == round(config)))
source('/mnt/maybe/home/tbilton/GusMap/R/simulate.R')
simFS(0.1,0.1,c(1,3,5,4),4,4,3,formats=NULL)
source('/mnt/maybe/home/tbilton/GusMap/R/simulate.R')
source('/mnt/maybe/home/tbilton/GusMap/R/simulate.R')
simFS(0.1,0.1,c(1,3,5,4),4,4,3,formats=NULL)
debug(simFS)
n
simFS(0.1,0.1,c(1,3,5,4),4,4,3,formats=NULL)
!is.null(thres)
!is.numeric(thres)
!is.infinite(thres)
(!is.numeric(thres) | !is.infinite(thres))
!is.null(thres) & (!is.numeric(thres) | !is.infinite(thres))
if(!is.null(thres) & (!is.numeric(thres) | !is.infinite(thres))) print('yes')
set.seed("A")
set.seed(-13.3)
set.seed(rep(-13.3,2))
is.logical(NA)
is.logical("A")
is.logical(NULL)
?is.logical
if(NA) print('yes')
is.logical(1)
is.logical(0)
is.logical(NaN)
is.logical(Na)
is.logical(NA)
q()
10^(-0:11))
10^(-0:11)
10^(-(0:11))
library(BrallieR)
library(BrailleR)
library(ASMap)
library(GusMap)
detach('package:GusMap', unload=T)
getwd()
setwd("./GusMap/")
library(devtools
)
build()
build()
build()
install.packages("~/GusMap_0.0.1.tar.gz", repos = NULL, type = "source")
install.packages("~/GusMap_0.0.1.tar.gz", repos = NULL, type = "source")
library(GusMap)
?rf_est_FS
nInd=50; NoDS=1
nSnps=12
rf <- 0.01
config <- c(2,1,1,3,2,3,1,1,3,1,2,1)
rd_dist="NegBinom"
F1data <- simFS(0.01,config=config,nInd=nInd,nSnps=nSnps,meanDepth=6,filename="Sim1_ds", direct="simData", thres=5,
formats=NULL, NoDS=NoDS, rd_dist = rd_dist)
F1data
?boot
?mstmap.cross
OPGP <- infer_OPGP_FS(F1data$genon, F1data$depth, config)
OPGP
rf_est_FS(genon = list(F1data$genon), depth = list(F1data$depth), OPGP = list(OPGP), noFam = 1)
debug(rf_est_FS)
rf_est_FS(genon = list(F1data$genon), depth = list(F1data$depth), OPGP = list(OPGP), noFam = 1)
nInd
nSnps
init_r
init_r
optim(logit2(init_r), ll_fs_mp_scaled,
method = "BFGS", control = optim.arg, genon = genon,
depth = depth, nInd = nInd, nSnps = nSnps, OPGP = OPGP,
noFam = noFam)
length(init_r)
length(init_r) != 12
undebug(rf_est_FS)
rf_est_FS(0.01,genon = list(F1data$genon), depth = list(F1data$depth), OPGP = list(OPGP), noFam = 1)
rf_est_FS(0.01,genon = list(F1data$genon), depth = list(F1data$depth), OPGP = list(OPGP), noFam = 1, sexSpec=T)
config <- c(2,2)
F1data <- simFS(0.01, config=config, nInd=50, nSnps=2, meanDepth=5)
config
debug(simData)
debug(simFS)
config <- c(2,2)
F1data <- simFS(0.01, config=config, nInd=50, nSnps=2, meanDepth=5)
writeFiles
config <- c(2,2)
F1data <- simFS(0.01, config=config, nInd=50, nSnps=2, meanDepth=5, formats=NULL)
config <- c(2,2)
F1data <- simFS(0.01, config=config, nInd=50, nSnps=2, meanDepth=5, formats=NULL)
writeFiles
parhap
parHap
parHap[cbind(sample(1:2, size = sum(config == 2), replace = T),
which(config == 2))] <- "B"
parHap
parHap[cbind(sample(3:4, size = sum(config == 3), replace = T),
which(config == 3))] <- "B"
parHap
parHap[cbind(c(sample(1:2, size = sum(config == 1), replace = T),
sample(3:4, size = sum(config == 1), replace = T)),
rep(which(config == 1), 2))] <- "B"
parHap
if (parHap[1, which(apply(parHap[1:2, ], 2, function(x) !(all(x ==
"A"))))[1]] == "B")
parHap[1:2, ] <- parHap[2:1, ]
if (parHap[3, which(apply(parHap[3:4, ], 2, function(x) !(all(x ==
"A"))))[1]] == "B")
parHap[3:4, ] <- parHap[4:3, ]
parHap
all(parHap[3:4, ] == "A")
!(all(parHap[3, ] == "A"))
apply(parHap[3:4, ], 2, function(x) !(all(x ==
"A")))
which(apply(parHap[3:4, ], 2, function(x) !(all(x ==
"A"))))[1]] == "B")
which(apply(parHap[3:4, ], 2, function(x) !(all(x ==
"A"))))
parHap[3, which(apply(parHap[3:4, ], 2, function(x) !(all(x ==
"A"))))[1]]
parHap[3, which(apply(parHap[3:4, ], 2, function(x) !(all(x ==
"A"))))[1]] == "B"
if(parHap[3, which(apply(parHap[3:4, ], 2, function(x) !(all(x ==
"A"))))[1]] == "B")
)
is.character(NULL)
is.element("A'")
is.element("A")
filename = " fhgkr "
!is.character(filename) || length(filename)!=1
filename = rep(" fhgkr ",2)
!is.character(filename) || length(filename)!=1
filename = c(1,2)
!is.character(filename) || length(filename)!=1
filename = NULL
!is.character(filename) || length(filename)!=1
